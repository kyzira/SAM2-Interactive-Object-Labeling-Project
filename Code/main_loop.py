"""
This Code reads the csv list of all damages, opens it in SAM2 to label it and if finished opens the next damage.
"""

import os
import pandas as pd
import convert_video_to_frames as conv
import sam2_interface as sam2


output_dir = r"C:\Code Python\automation-with-sam2\labeling_project"
masks_dir = os.path.join(output_dir, "masks")
labels_dir = os.path.join(output_dir, "labels")
os.makedirs(masks_dir, exist_ok=True)
os.makedirs(labels_dir, exist_ok=True)

index_path = os.path.join(output_dir, "current_index.txt")
table_path = os.path.join(output_dir, "alle_schaeden_gleichmaessige_liste.csv")


usecols = ["Videoname", "Videozeitpunkt (h:min:sec)", "Schadenskürzel", "Videopfad", "Schadensbeschreibung"]
damage_table = pd.read_csv(table_path, usecols=usecols, delimiter=";")

if os.path.exists(index_path):
    with open(index_path, "r") as index_file:
        index_content = index_file.read().strip() 
        current_index = int(index_content)
else:
    current_index = 0

total_length = len(damage_table)



label_csv_header = ["Damage Type", "Start Frame", "End Frame", "Point in Frame", "X Coordinates", "Y Coordinates", "Point Label"]




while current_index <= total_length:
    # Update index text file
    with open(index_path, "w") as file:
        file.write(str(current_index))


    # Prepare everything
    current_video_name = damage_table.iloc[current_index]['Videoname']
    current_frame_dir = os.path.join(masks_dir, current_video_name)

    input_path = damage_table.iloc[current_index]['Videopfad']

    damage_time = damage_table.iloc[current_index]['Videozeitpunkt (h:min:sec)']
    damage_time_split = damage_time.split(":")
    damage_second = int(damage_time_split[0]) *60*60 + int(damage_time_split[1])*60 + int(damage_time_split[2])

    frame_rate = 15


    # Convert video into frames
    conv.convert_video(input_path=input_path, output_path=current_frame_dir, damage_second=damage_second, frame_rate = frame_rate)


    # Segment frames
    app = sam2.ImageDisplayApp(frame_dir = current_frame_dir, video_path = input_path, frame_rate = frame_rate, window_title= damage_table.iloc[current_index]["Schadensbeschreibung"])
    app.run()




    # Create label csv
    current_mask_dir = os.path.join(current_frame_dir, "masks")
    label_csv_path = os.path.join(labels_dir, f"{current_video_name}_labels.csv")
    txt_list = []
    mask_list = []


    with open(label_csv_path, "w") as label_csv:
        # Write the header
        label_csv.write(",".join(label_csv_header) + "\n")
        
        # Write the first row with Damage Type, Start Frame, and End Frame
        first_row_written = False
        
        # Iterate over .txt files generated by SAM2
        for file_name in os.listdir(current_mask_dir):

            if file_name.lower().endswith('.txt'):
                txt_list.append(file_name)
            else:
                mask_list.append(file_name)

        mask_list.sort()

        start_frame = mask_list[0]
        start_frame = start_frame.split(".")[0]

        end_frame = mask_list[-1]
        end_frame = end_frame.split(".")[0] 

        for file_name in txt_list:
            file_path = os.path.join(current_mask_dir, file_name)

            # Read points and labels from the .txt file
            with open(file_path, 'r') as file:
                for line in file:
                    parts = line.strip().split(',')
                    if len(parts) == 3:
                        x, y, label = int(parts[0].strip()), int(parts[1].strip()), int(parts[2].strip())
                        
                        # Extract frame index from file name
                        point_frame = int(file_name.split(".")[0])
                        
                        # Write data to CSV, include Damage Type, Start Frame, and End Frame only in the first row
                        if not first_row_written:
                            label_csv.write(f"{damage_table.iloc[current_index]['Schadenskürzel']},{int(start_frame)},{int(end_frame)},{point_frame},{x},{y},{label}\n")
                            first_row_written = True
                        else:
                            label_csv.write(f",,,{point_frame},{x},{y},{label}\n")
    



    current_index += 1








